# ---------------------------------------------------------
# Streamlit 통합 MCP ReAct Agent 챗봇 (060 UI 스타일)
#  - Chinook DB MCP 서버 + Notion MCP 서버 통합
#  - 제출 시마다 MCP 서버 연결 후 에이전트 단회 호출
# ---------------------------------------------------------


















# ---------------------------------------------------------
# LLM 초기화 (LangChain 표준 init_chat_model)
# ---------------------------------------------------------


# ---------------------------------------------------------
# Streamlit 페이지 및 헤더
# ---------------------------------------------------------



# ---------------------------------------------------------
# 사이드바 버튼
# ---------------------------------------------------------




# ---------------------------------------------------------
# Session State 초기화
# ---------------------------------------------------------



# ---------------------------------------------------------
# 환경 변수 점검 (Notion 관련)
# ---------------------------------------------------------








# ---------------------------------------------------------
# MCP Agent 실행 (제출 시 일회 호출)
# ---------------------------------------------------------







    # ───────────────────────────────────────────────
    # ① 서버 스크립트 경로 설정
    #   현재 파일 경로: <project_root>/streamlit-llm_LangChain/070_Chatbot.py
    #   Chinook DB MCP 서버: <project_root>/DB_MCP_Agent/agent_server.py
    # ───────────────────────────────────────────────






    # ───────────────────────────────────────────────
    # ② MCP 서버 실행 파라미터 정의
    #   • Chinook DB 서버: Python 스크립트 직접 실행
    #   • Notion MCP 서버: Node.js 기반 npx 실행
    # ───────────────────────────────────────────────











    # ───────────────────────────────────────────────
    # ③ 사용자 입력 메시지에 "기본 Notion 페이지 ID" 안내문 추가
    #   • 마지막 HumanMessage만 찾아서 안내문을 덧붙임
    #   • Notion 페이지 자동화 시 기본 parent ID로 활용됨
    # ───────────────────────────────────────────────



    # 마지막 HumanMessage 인덱스 찾기




    # 해당 메시지에 기본 페이지 ID 주입










    # ───────────────────────────────────────────────
    # ④ MCP 서버들과 비동기 통신 채널(표준입출력 기반) 생성
    #   • Chinook DB → SQL 분석용 도구 로드
    #   • Notion → 페이지 생성/갱신용 도구 로드
    #   • 두 MCP 서버에서 제공하는 도구들을 통합
    #   • LangGraph ReAct Agent 생성 후 일회 실행
    # ───────────────────────────────────────────────








                    # 각 MCP 서버에서 제공하는 LangChain 도구 목록 로드




                    # LangGraph의 ReAct Agent 생성 (LLM + 도구 결합)


                    # 에이전트를 비동기 실행 (메시지 히스토리 기반)


                    # 마지막 AI 응답 메시지를 추출하여 텍스트만 반환




# ---------------------------------------------------------
# 사이드바 버튼 동작
# ---------------------------------------------------------




    # ─────────────────────────────────────────────
    # 세션에 저장된 전체 대화(message)들을 문자열로 합치기
    # 각 메시지의 타입(System / User / AI)에 따라 역할(Role)을 구분함
    # ─────────────────────────────────────────────











        # role 과 content(본문)를 합쳐 문자열 리스트에 저장


    # 대화 목록을 줄바꿈(\n)으로 하나의 긴 문자열로 결합


    # LLM에게 전달할 요약 요청 프롬프트 구성




    # Streamlit 사이드바에 요약 결과 출력



# ---------------------------------------------------------
# 메인 입력 폼 및 Agent 호출
# ---------------------------------------------------------





        # 사용자 메시지 추가









# ---------------------------------------------------------
# 마지막 AIMessage를 입력 폼 바로 아래에 표시
# ---------------------------------------------------------





# ---------------------------------------------------------
# 이전 대화 이력 표시 (060 스타일)
# ---------------------------------------------------------








